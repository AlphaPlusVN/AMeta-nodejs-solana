host: http://13.250.95.20:5000

POST /getNonce

input {
    refNo: '12345',
    walletAddress: 'asdasd123123
}

POST /getToken

input {
     refNo: '12345',
     walletAddress: string,
    sig: string,
}

POST /updateUser

auth Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIi...

input {
    refNo: '12345',
    walletAddress: string,
    email: string,
    userName: string,
}

POST /boxesForSale 
auth Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIi...
{
    refNo: '12345',
}

============BUY BOX======================
const PREFIX = 'a_meta';

export const getAMeta = async () => {
  let aMetaProgram = await getProgram();
  return await PublicKey.findProgramAddress(
    [Buffer.from(PREFIX)],
    aMetaProgram.programId
  )

}

export const findAssociatedTokenAddress = async(
  walletAddress: PublicKey,
  tokenMintAddress: PublicKey
): Promise<PublicKey> => {
  return (await PublicKey.findProgramAddress(
      [
          walletAddress.toBuffer(),
          TOKEN_PROGRAM_ID.toBuffer(),
          tokenMintAddress.toBuffer(),
      ],
      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID
  ))[0];
}


const [aMetaPDA, bump] = await getAMeta(program);
const boxNft = Keypair.generate();
const boxVault = await findAssociatedTokenAddress(buyerWallet.publicKey, boxNft.publicKey);
const ownerTokenAccount = new PublicKey("6tMXz1dGBiFCpWbVYnr3nN8yHgzUzHLYRcrRdruRTfPe);
const aMetaToken = new PublicKey("9ezfMjPwsPfRtRi41PER8xFpZDQCm2ccTj488uqGguT6);
const buyerTokenAccount = await findAssociatedTokenAddress(buyerWallet.publicKey, aMetaToken);
const boxCode = 'STARTER_BOX' // boxId lấy từ POST /boxesForSale 

const boxName = 'Starter Box' //name  lấy từ POST /boxesForSale 

await program.rpc.buyBox(bump, boxName, boxCode, {
      accounts: {
        aMeta: aMetaPDA,
        payer: buyerWallet.publicKey,
        boxMint: boxNft.publicKey,
        // aMetaToken: aMetaToken.publicKey,
        // mintAuthority: payer.publicKey,
        buyerTokenAccount: buyerTokenAccount,
        ownerTokenAccount: ownerTokenAccount,
        vault: boxVault,
        metadata: metadataAddress,
        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,
        tokenProgram: TOKEN_PROGRAM_ID,
        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
        systemProgram: anchor.web3.SystemProgram.programId,
      }
      , signers: [boxNft, buyerWallet]
    })

=========================================

POST /openBox 
auth Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIi...

{
    "refNo": "123456abcd",
    "walletAddress": "J6wxcpJYGLeD192VXjYRejooB7kEGbZMq8jdGLcY3fmR",
    "boxAddress": "2Sxvp7thwJVakdEJABh7L4TaCqi2U9fWSdSrJTViaULy", //Box NFT address
    "transferSig" : "66e3GisHS2g1zkb1wvVjLXTAYdZm3piFv4AXN7HbuPHdQihfBixLjqi9zE7aN8F6WAw5YY8GDd7yF3ewdgpvQHpS" //sig transfer box
}
